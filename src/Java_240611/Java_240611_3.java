package Java_240611;

public class Java_240611_3 {
  public static void main(String[] args) {
//    System.out.println(args[0]);
    System.out.println(add(1, 2, 3)); // 전달인자(아규먼트)

//    Java_240611.Java_240611_4 java_240611_4 = new Java_240611.Java_240611_4();
//    // java_240611_4.good();
//    // 퍼블릭인 것만 호출이 가능하다.  동적인 것
//
//    System.out.println(java_240611_4.b); //변수이므로 괄호나 따옴표 사용안함
//    System.out.println(java_240611_4.good());

    // 즉, Java_240611_4라는 클래스를 인스턴스화

    // 자바 240611_4의 함수를 사용하기 위해 메인을 호출한다.
    // 이를 호출하기 위해 인스턴스 java_240611_4 를 사용한다.
    // 객체(클래스)사용하기 위해 사용하는 것이 인스턴스(변수)
    // 클래스, 변수를 사용할 수 있는 변수가 인스턴스
    // java_240611_4 = null;  //힙영역의 참조되지 않는 데이터를 삭제한다.(가비지 컬렉션)

    // 인스턴스를 사용하여 함수나 클래스를 사용할 수 있다.

    //인스턴스 사용하지 않고 호출하기
    Java_240611_4.call(1,2 ); //스태틱은 정적인 메서드로 인스턴스 없이도 호출이 가능하다.
    //이러한 것이 정적 메서드인 스태틱의 특징 , 정적인 것
    //인스턴스 사용하지 않고도 그냥 입력하면 사용이 가능하다.
    //함수는 종료된 후 사라지지만 스태틱은 고정되므로 메모리에 항상 떠있다.(메모리 차지)
    // -> 메모리 효율성 떨어진다. 그래서 스태틱 남발하면 안된다.
    //특별한 케이스 즉, 인스턴스의 기능보다 특정 클래스에서만 있는 기능을 사용할 때
    //즉, 공유자원에 접근할 때 사용한다.

    //접근 제안자에 영향 받지 않음 private 사용해도 무관하나 보통 public 사용한다.

  }

  static int add(int a, int b, int c) { // 파라미터 1,2
    // 메서드 내부에서는 전달인자를 파라미터로 들어가 파라미터 이름을 작성한다.
    // 파라미터의 개수 늘어나면 아규먼트도 늘어나야 함

    return a + b + c;
  }

  // 로그인창 만들때 유저 이메일과 비밀번호를 통해 로그인한다. 반환값은 없다.
  // 로그인을 한다. - 메서드(행위)
  // 인풋 - 이메일, 비밀번호 - 파라미터로 넣는다. (필요한 데이터)

  static void login(String email, String password) {}
}
//구성편집에서 애플리케이션 적용하여 실행기 만들기 - tt
//tt 안에 '프로그램'를 통해 원하는 값을 전부 넣어줄 수 있다.
// 프로그램 인수 안에 입력한 것이 아규먼트가 되어 출력된다.